(* defining whitespace *)
white-space = ? white space characters ? ;

(* valid alphabet characters *)
upper-alphabetic-character = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
lower-aplhabetic-character = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
alphabetic-character = lower-alphabetic-character | upper-alphabetic-character ;

(* valid numbers *)
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
number = (digit | digit, {digit}) ;

(* valid booleans *)
boolean-literal = "true" | "false" ;

(* valid variable names *)
identifier = [(alphabetic-character | underscore)], { (alphabetic-character | digit | underscore) } ;

(* valid operations *)
subtraction-operator = "-"
binary-operator = "+" | subtraction-operator;
condition-operator = "<" | ">";

(* assignment symbol *)
assignment = "=" ;

(* defining precedence *)
open-precedent = "(" ;
close-precedent = ")" ;

(* defining statement lists *)
open-statement-list = "{" ;
close-statement-list = "}" ;

(* statement keywords *)
if = "if" ;
while = "while" ;

(* types *)
int = "int" ;
bool = "bool" ;
type = int | bool ;

(* declaration keywords *)
function = "func" ;
component = "comp" ;
returns = "->" ;

(* function keywords *)
return = "return" ;

(* misc *)
list-separator = "," ;
import = "import" ;